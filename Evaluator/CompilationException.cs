using System;
using System.Collections;
using System.CodeDom.Compiler;

namespace Evaluator
{
	/// <summary>
	/// An exception class providing access to errors thrown by a programmatically-accessed compiler.
	/// </summary>
	public class CompilationException : Exception
	{
		CompilerErrorCollection errors;

		/// <summary>
		/// The collection containing all errors and warnings generated by the compiler.
		/// </summary>
		public CompilerErrorCollection Errors
		{
			get
			{
				return errors;
			}
		}

		private string source = null;

		/// <summary>
		/// Returns a System.String that represents the current CompilationException.
		/// </summary>
		/// <returns>
		/// A System.String that represents the current CompilationException.
		/// </returns>
		public override string ToString()
		{
			System.Text.StringBuilder r = new System.Text.StringBuilder();
			for(int i = 0; i < errors.Count; i++)
			{
				r.AppendFormat("{0}{1}", errors[i].ToString(), Environment.NewLine);
			}
			if(source != null) r.Append(source);
			return r.ToString();
		}

		/// <summary>
		/// Initializes a new instance of the CompilationException class.
		/// </summary>
		/// <param name="resultErrors">
		/// The collection of errors generated by the compiler.
		/// </param>
		public CompilationException(CompilerErrorCollection resultErrors)
		{
			errors = new CompilerErrorCollection(resultErrors);
		}

		/// <summary>
		/// Initializes a new instance of the CompilationException class.
		/// </summary>
		/// <param name="resultErrors">
		/// The collection of errors generated by the compiler.
		/// </param>
		/// <param name="resultSource">
		/// The source that the compiler attempted to compile.
		/// </param>
		public CompilationException(CompilerErrorCollection resultErrors, String resultSource)
		{
			errors = new CompilerErrorCollection(resultErrors);
			source = resultSource;
		}
	}
}
